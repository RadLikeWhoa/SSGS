/**
 * Columns in SSGS rely on `box-sizing: border-box;` in order to work properly.
 * It is considered good practice to just apply the 'correct' box-sizing to all
 * elements, even by people like Paul Irish.
 * (see: http://paulirish.com/2012/box-sizing-border-box-ftw/)
 *
 * Without Compass:
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
 *
 * With Compass:
    @import "compass/css3/box-sizing";
    @include box-sizing(border-box);
 */

/**
 * $gutters is the only variable you'll ever need to set yourself. Use whatever
 * kind of value you want, be it px, em, rem or even percentages (allthough that would)
 * really miss the whole point of SSGS.
 */

$gutters: 1.5em;

/**
 * SSGS uses floats to do the heavy lifting with the layout so there needs to be a
 * clearfix. The one that's worked best for me is Nicolas Gallagher's `Micro Clearfix`
 * hack. It is included below. If you already have a clearfix in place, feel free to
 * remove it, but be sure to change the `@extend` rule inside `.grid`.
 * (see: http://nicolasgallagher.com/micro-clearfix-hack/)
 */

.clearfix {
    *zoom: 1;

    &::before,
    &::after {
        content: " ";
        display: table;
    }

    &::after {
        clear: both;
    }
}

/**
 * With SSGS, you define grid columns in your CSS using mixins. It's quite a great
 * thing as it removes the dependency on all those classes in your HTML.
 *
 * Example:
    .item {
        @include grid-col("one half"); // Equivalent to `grid-col("1/2")`.
    }
 *
 * You could also change SSGS by mapping the mixins to classes.
 *
 * Example:
    .one-half {
        @include grid-col("one half");
    }
 *
 * Still, it's prefferable to work with the mixins directly in your CSS as it allows
 * easy changes of the column count to enable a fully responsive grid. The following
 * example shows a typical mobile-first grid (i.e. 1-2-3-4 columns).
 *
 * Example:
    .item {
        @include grid-col;

        @media (min-width: 30em) {
            @include grid-col("one half");
        }

        @media (min-width: 40em) {
            @include grid-col("one third");
        }

        @media (min-width: 50em) {
            @include grid-col("one quarter");
        }
    }
 */
 
.grid-col {
    display: block; // So all kinds of elements can be used as grid containers.
    float: left;
    padding-left: $gutters;
}

@mixin grid-col ($width: "full") {
    @extend .grid-col;
    
    @if $width == "one half" or $width == "two quarters" or $width == "three sixths" or $width == "1/2" or $width == "2/4" or $width == "3/6" {
        width: 50%;
    } @else if $width == "one third" or $width == "two sixths" or $width == "1/3" or $width == "2/6" {
        width: 33.333%;
    } @else if $width == "two thirds" or $width == "four sixths" or $width == "2/3" or $width == "4/6" {
        width: 66.666%;
    } @else if $width == "one quarter" or $width == "1/4" {
        width: 25%;
    } @else if $width == "three quarters" or $width == "3/4" {
        width: 75%;
    } @else if $width == "one fifth" or $width == "1/5" {
        width: 20%;
    } @else if $width == "two fifths" or $width == "2/5" {
        width: 40%;
    } @else if $width == "three fifths" or $width == "3/5" {
        width: 60%;
    } @else if $width == "four fifths" or $width == "4/5" {
        width: 80%;
    } @else if $width == "one sixth" or $width == "1/6" {
        width: 16.666%;
    } @else if $width == "five sixth" or $width == "5/6" {
        width: 83.333%;
    } @else if $width == "golden ratio short" or $width == "golden short" {
        width: 38.195%;
    } @else if $width == "golden ratio wide" or $width == "golden wide" {
        width: 61.805%;
    } @else {
        width: 100%;
    }
}

/**
 * One of the most cumbersome things with traditional grid system is their use of
 * classes like `.end`, `.omega` or the like in order to remove the gutter at the start
 * or the end of a row. With SSGS this is not necessary anymore, yay! Allthough you don't
 * need to add the .grid class to your HTML, I think it's the preferrable way, as it makes
 * the basic structure much more easily visible. However, feel free to just @extend the
 * class from within your SCSS.
 *
 * Example:
    <div class="grid">
        <div class="item"></div>
        <div class="item"></div>
    </div>

    .item {
        @include grid-col("one half");
    }
 *
 * Note: Don't apply things like backgrounds or borders to the columns themselves.
 * It's neither good practice (use grids only for layout, not for styling) nor will
 * it work with SGSS. Use an element inside the column to do those things.
 */

.grid {
    @extend .clearfix;
    margin-left: -$gutters;
}
